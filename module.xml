<?xml version="1.0" ?>
<!--@POSTPROC: ./postproc.sh-->
<module suppressWarnings="true">

<User f="nodata">
  <User f="noscroll">
    <Users f="user" l="Control"/>
  </User>
</User>

<Control f="nodata">
  <Control>
    <autonum/>
    <Create_New_Record t="button" l="Scan_Record"/>
  </Control>
  <search/>
</Control>

<Scan_Record>
  <Tab>
    Metadata
    <ID f="id notnull autonum"/>
    <Attach_New_Files t="button"/>
    <File_Type>
      <opts>
        <opt>Article</opt>
        <opt>Book</opt>
        <opt>Document</opt>
        <opt>Image</opt>
        <opt>Oral</opt>
        <opt>Thesis</opt>
        <opt>Video</opt>
      </opts>
    </File_Type>
    <Language>
      <opts>
        <opt>English</opt>
        <opt>Malay</opt>
        <opt>Chinese</opt>
      </opts>
    </Language>
    <Repository>
      <opts>
        <opt>Australia — Australian Red Cross Archives</opt>
        <opt>Australia — Australian War Memorial</opt>
        <opt>Australia — National Archives, Canberra</opt>
        <opt>Australia — National Archives, Sydney</opt>
        <opt>Australia — National Archives, Melbourne</opt>
        <opt>Australia — National Archives, Other</opt>
        <opt>Australia — National Library</opt>
        <opt>Australia — Public Record Office of Victoria</opt>
        <opt>Australia — Salvation Army Archives</opt>
        <opt>Australia — State Records — NSW</opt>
        <opt>Australia — State Records — Other</opt>
        <opt>Internet</opt>
        <opt>Japan — Other</opt>
        <opt>Library — Other</opt>
        <opt>Malaysia — Other</opt>
        <opt>Singapore — National Archives</opt>
        <opt>Singapore — Other</opt>
        <opt>United Kingdom — Imperial War Museum</opt>
        <opt>United Kingdom — National Archives</opt>
        <opt>United States — National Archives and Record Administration</opt>
      </opts>
    </Repository>
    <Garrison>
      <opts>
        <opt>Hong Kong — Little Sai Wan</opt>
        <opt>Japan — Bofu</opt>
        <opt>Japan — Iwakuni</opt>
        <opt>Japan — Kure</opt>
        <opt>Japan — General</opt>
        <opt>Malaysia — Butterworth</opt>
        <opt>Malaysia — Terandak</opt>
        <opt>Singapore</opt>
        <opt>Thailand — Ubon</opt>
      </opts>
    </Garrison>
    <Period_From b="date">
      Date from
    </Period_From>
    <Period_Till b="date">
      Date to
    </Period_Till>
    <Doc_Name/>
    <File_Reference/>
    <!--<Theme>-->
      <!--<opts>-->
        <!--<opt>Architecture/Space</opt>-->
        <!--<opt>Crime/Punishment</opt>-->
        <!--<opt>Economics</opt>-->
        <!--<opt>Education</opt>-->
        <!--<opt>Gender</opt>-->
        <!--<opt>Host Communities</opt>-->
        <!--<opt>Legacy/Remembering</opt>-->
        <!--<opt>Media</opt>-->
        <!--<opt>Medical</opt>-->
        <!--<opt>Military</opt>-->
        <!--<opt>Politics</opt>-->
        <!--<opt>Race</opt>-->
        <!--<opt>Social</opt>-->
      <!--</opts>-->
    <!--</Theme>-->

    <Theme_Architecture_Space t="checkbox">
      Theme: Architecture/Space
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Base layout</opt>
        <opt>Facilities</opt>
        <opt>Historiography and theory</opt>
        <opt>One-base buildings</opt>
        <opt>Off-base buildings</opt>
        <opt>Security</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Architecture_Space>

    <Theme_Crime_Punishment t="checkbox">
      Theme: Crime/Punishment
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Historiography and theory</opt>
        <opt>Local law</opt>
        <opt>Military law</opt>
        <opt>Case law</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Crime_Punishment>

    <Theme_Economics t="checkbox">
      Theme: Economics
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Base</opt>
        <opt>Historiography and theory</opt>
        <opt>Local economy</opt>
        <opt>Shopping</opt>
        <opt>Withdrawal impact</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Economics>

    <Theme_Education t="checkbox">
      Theme: Education
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Curriculum</opt>
        <opt>Facilities</opt>
        <opt>Historiography and theory</opt>
        <opt>Parents</opt>
        <opt>Schools</opt>
        <opt>Students</opt>
        <opt>Teachers</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Education>

    <Theme_Gender t="checkbox">
      Theme: Gender
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Children</opt>
        <opt>Fathers</opt>
        <opt>Historiography and theory</opt>
        <opt>Husbands</opt>
        <opt>Mothers</opt>
        <opt>Sexual Relations — with other Australians</opt>
        <opt>Sexual Relations — with Locally Employed Civilians</opt>
        <opt>Sexual Relations — other</opt>
        <opt>Wives</opt>
        <opt>Women</opt>
      </opts>
    </Theme_Gender>

    <Theme_Host_Communities t="checkbox">
      Theme: Host Communities
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Interactions</opt>
        <opt>Historiography and theory</opt>
        <opt>Opposition</opt>
        <opt>Perceptions</opt>
        <opt>Locally Employed Civilians</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Host_Communities>

    <Theme_Legacy_Remembering t="checkbox">
      Theme: Legacy/Remembering
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Australians</opt>
        <opt>Local community</opt>
        <opt>Historiography and theory</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Legacy_Remembering>

    <Theme_Media t="checkbox">
      Theme: Media
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Electronic — Local</opt>
        <opt>Electronic — Australian</opt>
        <opt>Electronic — Other</opt>
        <opt>Historiography and theory</opt>
        <opt>Print — Local</opt>
        <opt>Print — Australian</opt>
        <opt>Print — Other</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Media>

    <Theme_Medical t="checkbox">
      Theme: Medical
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Case History</opt>
        <opt>Facilities</opt>
        <opt>Historiography and theory</opt>
        <opt>Local communities</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Medical>

    <Theme_Military t="checkbox">
      Theme: Military
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Accidents</opt>
        <opt>Equipment</opt>
        <opt>Families and dependents</opt>
        <opt>Historiography and theory</opt>
        <opt>Host military</opt>
        <opt>Justice</opt>
        <opt>Logistics</opt>
        <opt>Operations</opt>
        <opt>Personnel</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Military>

    <Theme_Politics t="checkbox">
      Theme: Politics
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Colonialism</opt>
        <opt>Garrison — Establishment</opt>
        <opt>Garrison — Operation</opt>
        <opt>Garrison — Withdrawal</opt>
        <opt>Historiography and theory</opt>
        <opt>Relations — Bilateral — Singapore</opt>
        <opt>Relations — Bilateral — Malaysia</opt>
        <opt>Relations — Bilateral — Hong Kong</opt>
        <opt>Relations — Bilateral — Japan</opt>
        <opt>Relations — Bilateral — NZ</opt>
        <opt>Relations — Bilateral — UK</opt>
        <opt>Relations — Bilateral — USA</opt>
        <opt>Relations — Regional</opt>
        <opt>Relations — International</opt>
        <opt>White Australia Policy</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Politics>

    <Theme_Race t="checkbox">
      Theme: Race
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Interaction/engagement</opt>
        <opt>Historiography and theory</opt>
        <opt>Language and terms</opt>
        <opt>White Australia Policy</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Race>

    <Theme_Social t="checkbox">
      Theme: Social
      <str>
        <fmt>$1</fmt>
        <app>, </app>
      </str>
      <opts>
        <opt>Families</opt>
        <opt>Food</opt>
        <opt>Historiography and theory</opt>
        <opt>Housing</opt>
        <opt>Interaction/engagement</opt>
        <opt>Relationships</opt>
        <opt>Sport</opt>
        <opt>Other</opt>
      </opts>
    </Theme_Social>
  </Tab>
  <Notes>
    <Notes/>
  </Notes>
  <Files>
    <Files t="file"/>
  </Files>
</Scan_Record>

<logic><![CDATA[
/****************************** RAW ATTACHMENTS *******************************/
  addOnEvent("Scan_Record/Tab/Attach_New_Files", "click", "attachNewFiles()");
  addOnEvent("Scan_Record",                      "show", "lastFileList = getFileList()");

  List getFileList() {
    String dirPath   = "/sdcard/DCIM/AZCamera";
    File   dir       = new File(dirPath);
    if (!dir.exists()) {
      return new ArrayList();
    }

    File[] fileArray = dir.listFiles();
    List   files     = Arrays.asList(fileArray);
           files     = new ArrayList(files);       // This makes `files` mutable

    // Sort the list of files by date modified
    Comparator compareModDate = new Comparator() {
        public int compare(File a, File b) {
          long aMod = a.lastModified();
          long bMod = b.lastModified();

          if (aMod > bMod) return +1;
          if (aMod < bMod) return -1;
          return 0;
        }
    };
    Collections.sort(files, compareModDate);

    return files;
  }

  String fileListToString(List files) {
    String s = "";
    for (i = 0; i < files.size(); i++)
      s += files.get(i).getName() + "\n";
    return s;
  }

  void attachAll(List files) {
    for (i = 0; i < files.size(); i++) {
      ref      = "Scan_Record/Files/Files";
      filePath = files.get(i).getAbsolutePath();
      addFile(ref, filePath);
    }
  }

  List attachNewFiles() {
    thisFileList = getFileList();

    newFiles = new ArrayList(thisFileList);
    newFiles = getFileList();
    newFiles.removeAll(lastFileList);

    lastFileList = thisFileList;

    if (newFiles.size() == 0) {
      showWarning("No new files found", "");
    } else {
      attachAll(newFiles);
      s = fileListToString(newFiles);
      showWarning("New files found", s);
    }

    return newFiles;
  }

/*************************** PERIOD INITIALISATION ****************************/
/* Triggered using @POSTPROC.                                                 */
/******************************************************************************/
  initialisePeriods() {
    tabgroup = "Scan_Record";
    setFieldValue("Scan_Record/Tab/Period_From", "07/07/1937");
    setFieldValue("Scan_Record/Tab/Period_Till", "02/09/1945");
    keepTabGroupChanges(tabgroup);
  }

/************************** SUB-THEME INPUT: "OTHER" **************************/
  subThemePostfixes = new ArrayList();
  subThemePostfixes.add("Architecture_Space");
  subThemePostfixes.add("Crime_Punishment");
  subThemePostfixes.add("Economics");
  subThemePostfixes.add("Education");
  subThemePostfixes.add("Gender");
  subThemePostfixes.add("Host_Communities");
  subThemePostfixes.add("Legacy_Remembering");
  subThemePostfixes.add("Media");
  subThemePostfixes.add("Medical");
  subThemePostfixes.add("Military");
  subThemePostfixes.add("Politics");
  subThemePostfixes.add("Race");
  subThemePostfixes.add("Social");

  // Determine vocab ID's displayed as "{Other}"
  subThemeVocab = Collections.synchronizedList(new ArrayList());
  otherVocabIds = Collections.synchronizedSet (new HashSet  ());
  for (postfix : subThemePostfixes) {
    propertyName = "Theme " + postfix.replaceAll("_", " ");
    fetchVocab(propertyName, subThemeVocab, "getOtherVocabIds()");
  }
  getOtherVocabIds() {
    for (vocabEntry : subThemeVocab) {
      vocabId   = vocabEntry.get(0);
      vocabName = vocabEntry.get(1);
      if (vocabName.equals("{Other}")) {
        otherVocabIds.add(vocabId);
      }
    }
  }

  otherWasSelected = new HashMap();
  initialiseSelected() {
    initialiseSelected(null);
  }
  initialiseSelected(attributes) {
    for (postfix : subThemePostfixes) {
      otherWasSelected.put(postfix, false);
    }

    if (attributes == null)
      return;
    for (postfix : subThemePostfixes) {
      for (a : attributes) {
        propertyName = "Theme " + postfix.replaceAll("_", " ");
        vocabId      = a.getValue("vocab");
        if (!a.getName().equals(propertyName)) continue;

        if (otherVocabIds.contains(vocabId)) {
          otherWasSelected.put(postfix, true);
          break;
        }
      }
    }
  }

  // Overrides autogen definition
  newScanRecord(){
    String tabgroup = "Scan_Record";

    String autoNumSource = "";
    autoNumSource = getFieldValue("Control/Control/Next_ID");
    if (isNull(autoNumSource)) {
      showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
      return;
    }

    setUuid(tabgroup, null);
    newTabGroup(tabgroup);
    populateAuthorAndTimestamp(tabgroup);
    String autoNumDest = "";
    autoNumDest = "Scan_Record/Tab/ID";
    incAutoNum(autoNumDest);

    initialisePeriods();
    initialiseSelected();
  }

  // Overrides autogen definition
  loadScanRecordFrom(String uuid) {
    String tabgroup = "Scan_Record";
    setUuid(tabgroup, uuid);
    if (isNull(uuid)) return;

    cb = new FetchCallback() {
      onFetch(result) {
        entity = result;
        attributes = entity.getAttributes();
        initialiseSelected(attributes);
      }
    };
    showTabGroup(tabgroup, uuid, cb);
  }

  // Returns true IFF `As` contains any of the elements in `Bs`.
  containsAnyOf(As, Bs) {
    for (b : Bs)
      if (containsString(As, b))
        return true;
    return false;
  }

  // Returns true IFF the list of NameValuePair objects in `As` has an element
  // whose getName method returns a string equal to `s`.
  containsString(As, s) {
    for (a : As) {
      if (a.getName().equals(s))
        return true;
    }
    return false;
  }

  requestMoreInput(subThemePostfix) {
    ref = "Scan_Record/Tab/Theme_" + subThemePostfix;
    val = getFieldValue(ref);

    if (containsAnyOf(val, otherVocabIds)) {
      if (!otherWasSelected.get(subThemePostfix)) {
        otherWasSelected.put(subThemePostfix, true);

        head  = "Additional Input Required...";
        body  = "You selected 'Other'. Please provide an annotation on the ";
        body += "box you checked to specify a sub-theme.";

        showWarning(head, body);
      }
    } else {
      otherWasSelected.put(subThemePostfix, false);
    }
  }

  for (postfix : subThemePostfixes) {
    ref = "Scan_Record/Tab/Theme_" + postfix;

    String cb = "";
    cb = "requestMoreInput(\"%s\")";
    cb = cb.replaceFirst("%s", postfix);

    addOnEvent(ref, "click", cb);
  }

/***************************** NAVIGATION DRAWER ******************************/
addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Scan_Record");

  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

]]></logic>
</module>
